[
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "dfe-r-community.github.io",
    "section": "",
    "text": "Best Practice Essentials for R\n\n\n\n\n\n\n\nguide\n\n\nreference\n\n\nbest-practice\n\n\n\n\nDfE guidelines for writing robust, maintainable code\n\n\n\n\n\n\nMar 14, 2023\n\n\nJacob Scott\n\n\n\n\n\n\n  \n\n\n\n\nDeploying to RSConnect\n\n\n\n\n\n\n\nguide\n\n\nreference\n\n\n\n\nA guide for how to deploy R content within the DfE\n\n\n\n\n\n\nOct 17, 2022\n\n\nChris Brownlie\n\n\n\n\n\n\n  \n\n\n\n\nIntroducing The DfE R Community Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\nWhy GitHub? Why the DfE R Community? Why blog? Some brief thoughts on all the above.\n\n\n\n\n\n\nOct 1, 2022\n\n\nJacob Scott\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2022-10-27-rsconnect-guide/index.html#r-rstudio",
    "href": "posts/2022-10-27-rsconnect-guide/index.html#r-rstudio",
    "title": "Deploying to RSConnect",
    "section": "R & RStudio",
    "text": "R & RStudio\nIt is assumed if you are reading this that you know that R is a programming language and that RStudio is an Integrated Development Environment (IDE) that can be used to develop R projects. RStudio (the IDE) is produced by a company called Posit (previously they were also named RStudio) and this company offers several other enterprise software. One of Posit’s enterprise offerings is a web server for deploying and hosting R-based content - this is called RStudio Connect and is what we use at the DfE to share R content."
  },
  {
    "objectID": "posts/2022-10-27-rsconnect-guide/index.html#git-azure-devops",
    "href": "posts/2022-10-27-rsconnect-guide/index.html#git-azure-devops",
    "title": "Deploying to RSConnect",
    "section": "Git & Azure Devops",
    "text": "Git & Azure Devops\nGit is a version control software that tracks changes to a project and allows you to better work collaboratively with others. Each project you work on should be contained within a Git repository (or ‘repo’ for short). Git repositories can also be linked to an online (or ‘remote’) repository, so that you (and anyone else) can save their changes to this remote repository. There are several free services for storing remote Git repositories: Github, Gitlab, Gitbucket being the most popular. As we are often working with sensitive data in the DfE and we have an existing business relationship with Microsoft, internally we use Azure Devops to host our remote Git repositories. Azure Devops has many functions, of which hosting Git repositories is just one, but for the purpose of deploying R content it is (along with release pipelines) the most important function. Repositories stored in Azure Devops are behind the DfE firewall."
  },
  {
    "objectID": "posts/2022-10-27-rsconnect-guide/index.html#release-pipelines",
    "href": "posts/2022-10-27-rsconnect-guide/index.html#release-pipelines",
    "title": "Deploying to RSConnect",
    "section": "Release Pipelines",
    "text": "Release Pipelines\nWithin Azure Devops, there is a framework called ‘Release pipelines’ - not to be confused with ‘Pipelines’, which are a separate thing. What these Release Pipelines can do, is take the contents of a Git repository, bundle it up and send it to a server along with some code to be run with it. In the case of deploying R content, we bundle a Git repository with some code that says ‘Deploy this to our RStudio Connect server’ and then send it to our ‘Build Server’ (which is separate to the RSConnect servers) which runs the accompanying code and deploys the content."
  },
  {
    "objectID": "posts/2022-10-27-rsconnect-guide/index.html#rsconnect",
    "href": "posts/2022-10-27-rsconnect-guide/index.html#rsconnect",
    "title": "Deploying to RSConnect",
    "section": "RSConnect",
    "text": "RSConnect\nAs mentioned above, RStudio Connect (RSConnect for short) is an enterprise offering from Posit which consists of a web server designed to host and share R content. It has many different features for simplifying management of a web server and a pretty front-end for users wanting to view any deployed R content.\n\nDfE Infrastructure\nAt the DfE, we have paid to have two RSConnect servers - one for Production (Prod) and one for Pre-Production (Pre-Prod). We also have 1250 licenses that can be assigned to colleagues in the Department. Note that licenses are required to view any restricted content and so the majority of people who want to view any deployed content will need a license.\n\n\nContent types\nRSConnect supports many different types of R-based content. It is important to note that the way in which we deploy content at the DfE is non-standard. If you read the RStudio Connect user guide, any references to deploying content straight from RStudio IDE or different methods for publishing can be ignored as they do not apply to our scenario.\nThe deployment process we use at the DfE will fail if it cannot detect the type of content being deployed. Below is a table explaining what types of content can be deployed and the file(s) that must be present in order for that to be detected.\n\nPossible RStudio Connect content types\n\n\n\n\n\n\nContent type\nRequirement\n\n\n\n\nShiny app\nEither a file named ‘app.R’, OR two files named ‘ui.R’ and ‘server.R’\n\n\nRMarkdown\nA file named ‘index.Rmd’\n\n\nbookdown\nA file named ‘bookdown.yml’\n\n\npkgdown\nA folder named ‘docs’\n\n\nStatic HTML page\nA file named ‘index.html’ in a folder named ‘docs’\n\n\nplumber API\nA file named ’plumber.R\n\n\nQuarto\nNot yet available\n\n\n\n\n\nAccessibility\nThe internal RSConnect servers are behind the DfE firewall and can be accessed by anyone from a DfE device. If you do not have a license then you will only be able to view content which has been open to be viewed by everyone in the department.\nAll RSConnect apps on the Production server can be accessed with any web browser (although Chrome or Firefox are recommended), and can all be accessed via a URL that starts with https://rsconnect/rsc/… - the end of the URL will be different for each piece of deployed content."
  },
  {
    "objectID": "posts/2022-10-27-rsconnect-guide/index.html#git-renv",
    "href": "posts/2022-10-27-rsconnect-guide/index.html#git-renv",
    "title": "Deploying to RSConnect",
    "section": "Git & renv",
    "text": "Git & renv\n\nYour project must be version controlled with Git: this can be done in several ways, such as with the git init command in Git Bash or the command prompt, or in RStudio itself. If you are unfamiliar with Git, there are several tutorials online that can help - it is crucial that, at the very least, you are comfortable committing and pushing changes to a remote repository. You should ensure that you have a repository set up and you have committed your work so far.\nYour project must use renv: renv is an R package that allows you to manage the packages used in your project. It keeps track of which packages you have installed and what versions you are using. This is useful when collaborating with others as it allows you to quickly and easily make sure you are using the same versions of the same packages as your collaborators - reducing the risk of differences across devices. Package management with renv is crucial for deploying content to RStudio Connect, however, because it is used by RSConnect to install all the packages needed for your content to work.\n\nYou can easily set up renv for an existing project using renv::init() and making sure you run renv::snapshot() (and commit any changes to Git) before every deployment."
  },
  {
    "objectID": "posts/2022-10-27-rsconnect-guide/index.html#azure-devops",
    "href": "posts/2022-10-27-rsconnect-guide/index.html#azure-devops",
    "title": "Deploying to RSConnect",
    "section": "Azure Devops",
    "text": "Azure Devops\n\nYour project must have a remote repository on Azure Devops: as mentioned previously, you should have access to a an Azure Devops project. If you do - and you have set up Git correctly - you should be able to add this repository as a remote for your project and push any changes you have committed so far."
  },
  {
    "objectID": "posts/2022-10-27-rsconnect-guide/index.html#common-types-of-pipeline",
    "href": "posts/2022-10-27-rsconnect-guide/index.html#common-types-of-pipeline",
    "title": "Deploying to RSConnect",
    "section": "Common types of pipeline",
    "text": "Common types of pipeline\nTo help with the process of setting up a pipeline, there are two templates provided below which you can download and use to set up your pipeline, following the instructions below. But first you need to understand a bit more about release pipelines and the difference between the two templates below.\nRelease pipelines consist of an artifact and one or more stages.\n\nThe artifact is the source for any code that is to be deployed - this is your Azure Devops repository that you’ve set up to host your project repository.\nEach stage, runs some code and optionally has some environment variables assigned to them which determine exactly how that code is run. In our case, we will use environment variables to determine whether we are deploying to the Production server or the Pre-Production server.\nEach stage can also optionally have pre-deployment conditions, which must be met before a stage is begun. In our case, we can use this to set an ‘approver’ for deployment to a stage - e.g. if multiple people are working on a project, a lead developer may have to give approval for any deployment to Production.\n\nWhen pipelines are set up, releases can then be created. Each release will travel from the artifact, along the pipeline and through each stage (as long as it passes the pre-deployment checks). An important point is that pipelines can be set up to automatically create releases whenever a change is pushed to the artifact (the Azure Devops repository). Combining this with the pre-deployment checks for each stage gives a multitude of options for how pipelines can work.\nIn practice, the vast majority of projects will suit either a 2-stage or 3-stage pipeline.\n\nIn a 2-stage pipeline:\n\nIf a change is made to any non-main branch in the repository:\n\nNo release is created\n\nIf a change is made to the main branch in the repository:\n\nA new release is created\nA ‘PreProd’ version of the content is deployed to the Pre-Production RSConnect server.\nIf that is successful, pre-deployment conditions for Prod are checked (i.e. an approver may have to give consent for the release to continue)\nA ‘Prod’ version of the content is deployed to the Production RSConnect server (this will be what customers/viewers of your content see)\n\n\n\n\n\n\nTwo stage pipeline\n\n\nA 2-stage pipeline is best for content that will iterate quickly, might only have one or two people working on it and typically may not require much QA/checking of changes. The general workflow will be that every time a change is made to the main branch and the content has been deployed to PreProd, the developer will check that it looks as expected and there aren’t any differences to how it appeared locally. If they are happy that the change has worked as expected, they can approve the change and it will be deployed to Prod.\n\nIn a 3-stage pipeline:\n\nIf a change is made to any non-main branch in the repository:\n\nA new release is created\nA ‘Dev’ version of the content is deployed to the Pre-Production RSConnect server.\n\nIf a change is made to the main branch in the repository:\n\nA new release is created\nA ‘PreProd’ version of the content is deployed to the Pre-Production RSConnect server.\nIf that is successful, pre-deployment conditions for Prod are checked (i.e. an approver may have to give consent for the release to continue)\nA ‘Prod’ version of the content is deployed to the Production RSConnect server (this will be what customers/viewers of your content see)\n\n\n\n\n\n\nThree stage pipeline\n\n\nA 3-stage pipeline provides more flexibility and more rigorous QA opportunities than a 2-stage pipeline. The general workflow will be that every time a change is made to a non-main branch of the repository, a Dev version of the content will be deployed to the Pre-Production RSConnect server. This can be then be viewed by the developer who made the change to see if it looks as expected. The Dev version will typically be where you test out potential changes where you are unsure if they will work as expected. Once you are happy that the Dev version is working, the changes can be merged into the main branch, which will trigger a deployment to PreProd. Here, the changes can be double checked, either by the developer or ideally another person. This is the final stage for ensuring the deployment won’t break anything and once this has been approved, it will deploy to the Prod version on the Production server and customers/viewers will be able to see the change.\nIf you are unsure which of the two pipelines is most appropriate for you, I’d recommend you default to the 3-stage pipeline as it allows more room for error and doesn’t increase the complexity of the pipeline too significantly.\nUse the buttons below to download the relevant template:\n\n\n\n Download 2 stage pipeline\n\n\n\n\n Download 3 stage pipeline"
  },
  {
    "objectID": "posts/2022-10-27-rsconnect-guide/index.html#implementing-your-template",
    "href": "posts/2022-10-27-rsconnect-guide/index.html#implementing-your-template",
    "title": "Deploying to RSConnect",
    "section": "Implementing your template",
    "text": "Implementing your template\nOnce you have the json file template downloaded from above, you can create a new Release pipeline for your content. In an Azure Devops Project, go to Pipelines -> Releases (on the navigation menu on the left).\n\n\n\nRelease pipelines\n\n\nClick on ‘New’ and ‘Import Release Pipeline’\n This should bring up a dialog box where you can select the json template you downloaded above. Click OK and this should take you to your pipeline editing page.\nThere are a few more steps you must take before you can create your first release and these will differ depending on which of the two templates you are using.\n\nTwo-stage pipeline\nIf you are using a 2-stage pipeline, your pipeline page should look like the image below:\n\n\n\nImported 2-stage pipelines\n\n\n\nFirst, you should rename your pipeline. Use the name of your repository or content and use hyphens instead of spaces.\nNext you need to add the artifact, if you click on the box on the left that says ‘Add artifact’, it will bring up the menu below.\n\n\n\n\nAdd artifact\n\n\nHere you should select your Azure Devops Project and your repository, after which some additional options will appear below. You should only need to add information for two of them.\n\nFor ‘Default branch’, select your main branch (i.e. ‘master’ or ‘main’)\nFor ‘Default version’, select ‘Latest from the default branch’\n\nThen you can click ‘Add’ to add your artifact.\n\nClick on the ‘Pre-prod’ box, which will take you to the Task page for that stage. If you click on the ‘Deploy to RSConnect’ task, you should see something similiar to below.\n\n\n\n\nPreprod task\n\n\nIn the setting that requires attention - ‘Agent pool’ - select ‘RSConnect’. If you cannot see it, you will have to raise a service desk request to allow your Azure Devops project access to the build server.\nYou can then go back to the pipeline view by clicking ‘Pipeline’ in the menu above.\n\nClick the oval button on the left of the Prod stage. This will bring up the pre-deployment conditions for deployment to production.\n\n\n\n\nPre-deployment conditions\n\n\nHere you can either select someone to be the approver, or disable this if you do not want it.\n\nRepeat step 3, but for Prod this time.\nNext you should set up your artifact to create a release every time you make a change to the main branch. You can do this by clicking on the lightning bolt symbol on the right of your artifact. This will bring up a menu where you can enable ‘Continuous deployment trigger’ and select your main branch so that commits to other branches do not inadvertently cause a release.\n\n\n\n\nContinuous deployment trigger\n\n\n\nNow you just need to make one more change and you will be ready to create a release and deploy your content! Click on ‘Variables’ on the menu at the top. This will bring up a list of three variables, two named APP_ID (you’ll fill those in later) and one called APP_NAME. Enter a value for the variable APP_NAME: use the name of your project, with hyphens instead of spaces.\n\nNow you can save your pipeline and go to ‘Creating your first release’!\n\n\nThree-stage pipeline\nIf you are using a 3-stage pipeline, your pipeline page should look like the image below:\n\n\n\nImported 3-stage pipelines\n\n\n\nFirst, you should rename your pipeline. Use the name of your repository or content and use hyphens instead of spaces.\nNext you need to add the artifact, if you click on the box on the left that says ‘Add artifact’, it will bring up the menu below.\n\n\n\n\nAdd artifact\n\n\nHere you should select your Azure Devops Project and your repository, after which some additional options will appear below. You should only need to add information for two of them.\n\nFor ‘Default branch’, select your main branch (i.e. ‘master’ or ‘main’)\nFor ‘Default version’, select ‘Latest from the default branch’\n\nThen you can click ‘Add’ to add your artifact.\n\nClick the oval button on the left of the Dev stage. This will bring up the pre-deployment conditions for deployment to dev.\n\n\n\n\nDev pre-deployment conditions\n\n\nHere you should enable Artifact filters, then click ‘Add’ and select your artifact. In the new filter, select Type as ‘Exclude’ and Branch as your main branch (e.g. main or master). This will ensure that deployment will only happen to Dev when a change is made to a non-main branch.\n\n\n\nDev pre-deployment filter\n\n\n\nClick on the ‘Dev’ box, which will take you to the Task page for that stage. If you click on the ‘Deploy to RSConnect’ task, you should see something similiar to below.\n\n\n\n\nPreprod task\n\n\nIn the setting that requires attention - ‘Agent pool’ - select ‘RSConnect’. If you cannot see it, you will have to raise a service desk request to allow your Azure Devops project access to the build server.\nYou can then go back to the pipeline view by clicking ‘Pipeline’ in the menu above.\n\nRepeat step 4, for Pre-Prod.\nClick the oval button on the left of the Prod stage. This will bring up the pre-deployment conditions for deployment to production.\n\n\n\n\nPre-deployment conditions\n\n\nHere you can either select someone to be the approver, or disable this if you do not want it.\n\nRepeat step 4, but for Prod this time.\nNext you should set up your artifact to create a release every time you make a change to the main branch. You can do this by clicking on the lightning bolt symbol on the right of your artifact. This will bring up a menu where you can enable ‘Continuous deployment trigger’ and select your main branch so that commits to other branches do not inadvertently cause a release.\n\n\n\n\nContinuous deployment trigger\n\n\n\nNow you just need to make one more change and you will be ready to create a release and deploy your content! Click on ‘Variables’ on the menu at the top. This will bring up a list of three variables, two named APP_ID (you’ll fill those in later) and one called APP_NAME. Enter a value for the variable APP_NAME: use the name of your project, with hyphens instead of spaces.\n\nNow you can save your pipeline and go to ‘Creating your first release’!"
  },
  {
    "objectID": "posts/2022-10-27-rsconnect-guide/index.html#creating-your-first-release",
    "href": "posts/2022-10-27-rsconnect-guide/index.html#creating-your-first-release",
    "title": "Deploying to RSConnect",
    "section": "Creating your first release",
    "text": "Creating your first release\nIf you have followed the steps above correctly, then whenever you push a change to the main branch of your repository it will create a new release for you. The first time however, it is easier to just manually create the release in Azure Devops itself.\nTo do this, go to Releases (i.e. see the first screenshot in the ‘Implementing your pipeline’ section) and select your pipeline on the left hand side - you may have to search for it and you should favourite it so that it is more visible in future. If you hover your mouse over the pipeline you will see a star you can click on the right.\n\n\n\nFinding your release pipeline\n\n\nOnce you have selected your release pipeline, you can click the blue ‘Create release’ button in the top right to manually create a release. You should see a menu like below (it may differ slightly depending on how you set your pipeline up and how many stages it has):\n\n\n\nCreate release menu\n\n\nYou do not need to change anything here, but for information:\n\nThe ‘Stages for a trigger change from automated to manual.’ section can be used to make sure that e.g. the release does not automatically deploy to Prod once Pre-prod has completed. This might be useful if you are manually creating a release but want to make sure it does not deploy to Production.\nThe ‘Artifacts’ section can be used to select a different commit than the most recent from the main branch. It is unlikely you will ever need to change this.\nThe ‘Release description’ section can optionally be used to add a comment to your release. This might be useful when you check back in future to remind yourself if there is a specific reason for you manually creating a release (rather than it automatically being created).\n\nClick the ‘Create’ button at the bottom.\nYou should see a new release appear in the ‘Releases’ section of the page (you may have to refresh the page). The release will be greyed out for all stages but will have started running the tasks of your first stage. You can click on the relase name to monitor the progress of the release but otherwise, wait for a few minutes until the stage(s) are complete. - If your stages all deploy successfully - great! You can continue with this section. - If one or more of your stages are unsuccessful, see the Troubleshooting section for common problems, or post in the DfE R Community Teams site.\n\n\n\n\n\n\nNote\n\n\n\nNote that sometimes a deployment stage will be marked as ‘Successful’ when it has in fact failed. This is because the status shown in Azure Devops denotes whether the app was successfully bundled and passed to RSConnect and is unaware of whether RSConnect successfully unpacked the app and can display it - although this will be visible from the deployment log.\n\n\nIf your app has successfully deployed to all stages - you’re almost done! There are just a couple of extra steps that need to be completed first.\nTo get more information on your release, you should view the log file for the deployment. To do this, click on a release and then hover over a stage of that release. A ‘Logs’ button should appear, click it. You should then be able to see the following page:\n\n\n\nClick on a release\n\n\n\n\n\nClick on a stage’s logs\n\n\n\n\n\nThe logs for a particular stage\n\n\nIf you then click on the section titled ‘PowerShell Script’, you will see the detailed logs for the main section of the release stage deployment. It will look something like the below:\n\n\n\n\nRelease stage deployment log\n\n\n\n\nReading a deployment log file\nThe PowerShell script log is broken up into a few different stages - these correspond to the different stages of the ‘Deploy to RSConnect’ task.\n\nFirst, the script will print out some information about the Build server (which is where this task is occurring) and then print the value of all available environment variables. For example, if you look for the line that starts ‘RELEASE_ENVIRONMENTNAME’, that will be either Pre-Prod or Prod depending on which stage you are deploying. You can look through these to see what information Azure Devops knows about your deployment.\nThe task then tries to restore the developer’s environment. This is where renv is used to install all the packages necessary for your content to run. Note that this is installing these packages onto the Build server, before it then bundles the information up and sends it to the relevant RSConnect server. For this stage of the log file you will be able to see which packages and versions it is trying to install and whether it was successful.\nThe section immediately following the installation of R packages is where the Build server bundles the project and sends it to the RSConnect server. This section starts with the line ‘Preparing to deploy application…DONE’ (row 497 below) and ends with ‘Deploying bundle:…’ (row 503 below). If you see any warnings like those on rows 498-501, they can be ignored. Important: you will need to make a note of your app ID. This is visible on the line ‘Uploading bundle for application: xxx …DONE’ (row 502 below). In this case, the APP_ID is 693. Make a note of that for later.\n\n\n\n\n\nBundling stage of deployment\n\n\n\n\nAny lines that start with ‘[Connect]’ are output of code being run on the RSConnect server. The first lines of this section just print some information about the RSConnect server like R version and server info.\nFollowing this, the required R packages are installed on the RSConnect server (so the content can be run). This is when most issues will occur, so check this section if it looks like something has gone wrong.\nIf the deployment was successful, this section will end with the line ‘Application successfully deployed to…’ and then a URL (row 706 below). Make a note of this URL, as you will need it later.\n\n\n\n\nApplication successfully deployed\n\n\n\nThe final section gives some information on the deployment - this is stored for information governance purposes for access by RStudio Connect admins.\n\n\n\nFinal steps\nIf you remember back in the last step of ‘Implementing your template’, we saw there was an environment variable associated with each stage called APP_ID. This should be filled in for each stage with the integer number you saw in step 3 of reading your deployment log file above (i.e. the ID will be different for each stage).\nThe final step before being able to see your content is to raise some service desk requests. You can do that here\nThe first request should be for ‘Change App Access List’. For access you can choose either:\n\nEntire Organisation: which means everyone in the DfE will be able to view your content\nSpecific users/AD Groups: you can give the username/email of individuals (including yourself) to give them access to the content. Alternatively, you can specify an existing AD group to be used to restrict access.\n\nYou should then also request to add yourself as a publisher - same link as above (‘Change to user role’ -> ‘Publisher’). This will mean you are able to view the logs for your content once it has been deployed to RSConnect. In the ‘Justification’ section, put something along the lines of ‘I have deployed (’App X’) and wish to be added as a collaborator so I can view the content logs’.\nYou may also wish to change the URL of your content (Change App URL), as the default URL uses the app GUID and so is not user friendly. Here you can change the URL to something more relevant and easy to remember."
  },
  {
    "objectID": "posts/2023-03-14-best-practice-essentials/index.html",
    "href": "posts/2023-03-14-best-practice-essentials/index.html",
    "title": "Best Practice Essentials for R",
    "section": "",
    "text": "Best Practice: What and Why\nIn R there are many ways do get the job done. None of these are bad - the right code is the code that works. That said, knowing what is best practice and striving to keep it has big benefits:\n\nYour code will be easier to write (less decisions for you to make)\nYour code will be easier to read and maintain (other people will be familiar with the conventions you use)\nYou will improve as an analyst and developer\n\n\n\nDfE Standards for R\nWherever possible, as an organisation we seek to defer to industry standards rather than creating our own. Broadly, we therefore recommend:\n\nR for Data Science (2e) for best-practice essentials\nThe Tidyverse style guide for a more rigorous overview of code styling\n\n\n\nA Best Practice Cheatsheet\nFor a quick primer on best-practice you can refer to the following cheatsheet:\n\n\n\n\n\nView at full resolution"
  },
  {
    "objectID": "posts/2022-10-28-dfe-r-community/index.html#current-state",
    "href": "posts/2022-10-28-dfe-r-community/index.html#current-state",
    "title": "Introducing The DfE R Community Blog",
    "section": "Current state",
    "text": "Current state\nThe DfE R Community has a lot going for it. We have an active community on Teams, semi-regular community meetings (most notably Coffee & Coding), and a good number of friendly experts who will generally take the time to help others troubleshooting bugs and Shiny app deployments.\nIf you were to sum up our R Community in a word, I think maturing would be a good fit. But, as with anything, there is room for improvement. As the technologies we’ve adopted in recent years become more embedded, we should step back and ask, What can we do better?"
  },
  {
    "objectID": "posts/2022-10-28-dfe-r-community/index.html#areas-for-improvement",
    "href": "posts/2022-10-28-dfe-r-community/index.html#areas-for-improvement",
    "title": "Introducing The DfE R Community Blog",
    "section": "Areas for improvement",
    "text": "Areas for improvement\nWhile our knowledge of R basics is quite strong, we still have plenty of room for improvement in other important areas. Among these, the most obvious ones are:\n\nVersion control: use of Git and GitHub / AZURE DevOps. Git skills are particularly tough to learn, but are much easier in collaboration with others. Good version control habits are extremely valuable skills - not only do they help you code better, they help you think clearly about project development.\nCollaboration: currently we don’t do much of this across divisions. This makes sense - different divisions do different things - but the smaller the knowledge-pool is, the easier it is for bad habits to form. Building links between areas will only be a good thing, and will potentially save hours of puzzling if people know where to ask for answers when they run into tough problems.\nBest practice: which packages/functions shouldn’t you use? How can you speed up your code? How can you make your code easier for other people to understand? These questions fall under ‘best practice’, and developing ourselves in this area will lead to less bugs, quicker development, and will make handing over projects to other colleagues much less painful.\nEvents: Previously we’ve had successful programmes like Coffee & Coding in the past, but more recently there hasn’t been much on. Regular DfE R Community catchups will help keep people engaged with the community, working together with other like-minded analysts and developing their skills. It’ll also help us keep abreast of the constant stream of new techniques and technologies emerging in the data-science world."
  },
  {
    "objectID": "posts/2022-10-28-dfe-r-community/index.html#q-how-can-we-improve-a-by-using-github",
    "href": "posts/2022-10-28-dfe-r-community/index.html#q-how-can-we-improve-a-by-using-github",
    "title": "Introducing The DfE R Community Blog",
    "section": "Q: How can we improve? A: By using GitHub!",
    "text": "Q: How can we improve? A: By using GitHub!\nUsing GitHub for development has several major benefits:\n\nGitHub is open: teams won’t have to make endless access requests in order to work together\nGitHub is widely used: we can easily learn lessons from other organisations, e.g. by looking through issues and pull requests on non-DfE projects - R packages from the Tidyverse are good examples\nGitHub is transparent: projects if we develop useful code we will get feedback from its users when things break - or when we do things in an obviously sub-optimal way. This will help us build habits of properly maintaining and addressing bugs in existing projects and formally deprecating any defunct/superseded code.\nGitHub is collaborative: communicating about code is challenging, but GitHub provides many polished, thoughtful solutions. This will make it easier to give and ask for feedback on code, and will help develop our communication skills as analysts in ways which will be naturally transferable - particularly to internal work we do on AZURE DevOps.\n\nThe UK Government Technology Code Of Practice unequivocally supports open source development, and actively encourages government departments to move towards open source as a mode of development:\n\n3. Be open and use open source\nPublish your code and use open source software to improve transparency, flexibility and accountability.\n\n\n\n\n\n\n\nNote\n\n\n\nAs a general rule, projects we develop on GitHub will be potentially useful to members of the public. Needless to say, projects using sensitive data are out of the question."
  },
  {
    "objectID": "posts/2022-10-28-dfe-r-community/index.html#so-the-blog",
    "href": "posts/2022-10-28-dfe-r-community/index.html#so-the-blog",
    "title": "Introducing The DfE R Community Blog",
    "section": "So… The blog?",
    "text": "So… The blog?\nThe DfE R Community Blog will be a place where we (civil servants at DfE) can share our thoughts, experiences and lessons learnt as we develop code together. These might include technical guides, pieces on specific coding techniques (they don’t have to just be about R!), announcements about community projects, or more reflective pieces like this one. Anyone is welcome to submit contributions - a brief guide for how to do this can be found on the blog’s repo."
  },
  {
    "objectID": "posts/2022-10-28-dfe-r-community/index.html#how-can-i-get-involved",
    "href": "posts/2022-10-28-dfe-r-community/index.html#how-can-i-get-involved",
    "title": "Introducing The DfE R Community Blog",
    "section": "How can I get involved?",
    "text": "How can I get involved?\nThe easiest way is to go to the DfE R Community organisation on GitHub, find a project you’re interested in and create a new issue saying you want to help! Alternatively, if you have an idea for a new project, message one of the organisation members about it and we’ll help you get set up 😃\nIf you’d like to write a blog post, you can read about how to do this at the blog’s repo."
  },
  {
    "objectID": "posts/2022-10-28-dfe-r-community/index.html#thanks-for-reading",
    "href": "posts/2022-10-28-dfe-r-community/index.html#thanks-for-reading",
    "title": "Introducing The DfE R Community Blog",
    "section": "Thanks for reading!",
    "text": "Thanks for reading!\nThat’s all for now! Here’s some R code to reward you for making it this far:\n\nlibrary(tidyverse)\nlibrary(gganimate)\n\ntext <- \"That's All Folks!\"\n\n# Create a dataset to plot\nplot_data <- tibble(\n    text = map_chr(seq_len(nchar(text)), ~ substr(text, 1, .x)),\n    frame = seq_along(text)\n)\n\n# Create a plot\np <- ggplot(plot_data, aes(1, 1, label = text)) +\n    geom_text(size = 12, angle = 10) +\n    transition_states(frame)\n\n# Animate and print\nanimate(p, fps = 60)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "The DfE R Community Blog",
    "section": "",
    "text": "Welcome to the DfE R Community Blog! This is a resource updated by data scientists in the (UK Government) Department for Education with posts that we think others may also find useful/interesting. These may include:\n\nAnnouncements related to projects available at the DfE R Community GitHub\nTechniques/technologies/topical tips we want to draw attention to\nAny other thoughts about how to make data science effective for organisations!\n\nIf you’d like to contribute, it’s as easy as submitting a pull request at the project repo on GitHub.\nHappy Coding! 😃💻📈"
  }
]