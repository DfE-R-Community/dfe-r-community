{
  "hash": "fd05aa88d40f1887734377a75ae28366",
  "result": {
    "markdown": "---\ntitle: \"Deploying to RSConnect\"\nauthor: \"Chris Brownlie\"\ndate: \"2022-10-17\"\ncategories: [guide, reference]\ndescription: 'A guide for how to deploy R content within the DfE'\nimage: \"rocket-launch.jpg\"\nexecute: \n  message: false\n  warning: false\n---\n\n::: {.cell}\n\n:::\n\n\n# What is this document for?\n\nThis document is a guide for how to deploy content to the Department for\nEducation's internal RStudio Connect servers, including R Shiny apps,\nRMarkdown/Quarto documents, pkgdown sites.\n\n::: callout-note\nThis guide is aimed at R Developers within the DfE who want to share\ntheir apps or documents **within the department** - RSConnect is behind\nthe DfE firewall and so cannot be used for public-facing content.\n:::\n\n# Pre-requisites\n\nThere are some steps you must take before you can start the deployment\nprocess. All of these only need to be completed once, so if you deploy\nmore content in future, you will not have to repeat these steps.\n\n-   **Install R & Rstudio**: It is assumed if you are reading this that\n    you have already developed using R and RStudio. If not, you must\n    install these via the Software Centre and it is recommended that you\n    get familiar with R and create your first app/document, then return\n    to this guide when you are ready to deploy.\n\n-   **Install Git**: You must have Git installed on your device, as you\n    will need to use Git for version controlling your project. If you do\n    not have Git installed, you can do so from [here (if you are using\n    Windows)](https://git-scm.com/download/win).\n\n-   **Ensure you have access to a DfE Azure Devops project**: If your\n    team do not already have a project you can request access to, you\n    must raise a service desk request to create one.\n\n-   **Ensure you have RSConnect Licenses**: In order to access anything\n    on the RSConnect servers, a user must have a license - of which\n    there are a limited amount. To ensure you have a license, you must\n    raise a [service desk request\n    here](https://dfe.service-now.com/serviceportal?id=sc_cat_item&sys_id=1e3c3cb9db80ab003b929334ca9619df&referrer=recent_items)\n    ('Assign RStudio Connect License' -\\> 'Both - add to VMT1PR-RSC User\n    and VMT1PR-PP-RSC User' -\\> Enter your email address -\\> Business\n    Justification: e.g. 'to develop and deploy R content to the\n    RSConnect servers'). If you are unsure whether you already have a\n    license or not, you can check using [this\n    app](https://rsconnect/rsc). If for example you already have access\n    to the Prod server, you can modify the service desk request to only\n    ask for a Pre-prod license.\n\n# Key concepts\n\n## R & RStudio\n\nIt is assumed if you are reading this that you know that R is a\nprogramming language and that RStudio is an Integrated Development\nEnvironment (IDE) that can be used to develop R projects. RStudio (the\nIDE) is produced by a company called *Posit* (previously they were also\nnamed RStudio) and this company offers several other enterprise\nsoftware. One of Posit's enterprise offerings is a web server for\ndeploying and hosting R-based content - this is called **RStudio\nConnect** and is what we use at the DfE to share R content.\n\n## Git & Azure Devops\n\nGit is a version control software that tracks changes to a project and\nallows you to better work collaboratively with others. Each project you\nwork on should be contained within a **Git repository** (or 'repo' for\nshort). Git repositories can also be linked to an online (or 'remote')\nrepository, so that you (and anyone else) can save their changes to this\nremote repository. There are several free services for storing remote\nGit repositories: Github, Gitlab, Gitbucket being the most popular. As\nwe are often working with sensitive data in the DfE and we have an\nexisting business relationship with Microsoft, internally we use **Azure\nDevops** to host our remote Git repositories. Azure Devops has many\nfunctions, of which hosting Git repositories is just one, but for the\npurpose of deploying R content it is (along with release pipelines) the\nmost important function. Repositories stored in Azure Devops are behind\nthe DfE firewall.\n\n## Release Pipelines\n\nWithin Azure Devops, there is a framework called 'Release pipelines' -\n**not to be confused with 'Pipelines', which are a separate thing**.\nWhat these Release Pipelines can do, is take the contents of a Git\nrepository, bundle it up and send it to a server along with some code to\nbe run with it. In the case of deploying R content, we bundle a Git\nrepository with some code that says 'Deploy this to our RStudio Connect\nserver' and then send it to our *'Build Server'* (which is separate to\nthe RSConnect servers) which runs the accompanying code and deploys the\ncontent.\n\n## RSConnect\n\nAs mentioned above, RStudio Connect (RSConnect for short) is an\nenterprise offering from Posit which consists of a web server designed\nto host and share R content. It has many different features for\nsimplifying management of a web server and a pretty front-end for users\nwanting to view any deployed R content.\n\n### DfE Infrastructure\n\nAt the DfE, we have paid to have two RSConnect servers - one for\nProduction (Prod) and one for Pre-Production (Pre-Prod). We also have\n1250 licenses that can be assigned to colleagues in the Department. Note\nthat licenses are required to view any restricted content and so the\nmajority of people who want to view any deployed content will need a\nlicense.\n\n### Content types {#content-types}\n\nRSConnect supports many different types of R-based content. It is\nimportant to note that the way in which we deploy content at the DfE is\nnon-standard. If you read the [RStudio Connect user\nguide](https://docs.rstudio.com/connect/user/), any references to\ndeploying content straight from RStudio IDE or different methods for\npublishing can be ignored as they do not apply to our scenario.\n\nThe deployment process we use at the DfE will fail if it cannot detect\nthe type of content being deployed. Below is a table explaining what\ntypes of content can be deployed and the file(s) that must be present in\norder for that to be detected.\n\n| Content type     | Requirement                                                           |\n|----------------------------------------|:-------------------------------|\n| Shiny app        | Either a file named 'app.R', OR two files named 'ui.R' and 'server.R' |\n| RMarkdown        | A file named 'index.Rmd'                                              |\n| bookdown         | A file named 'bookdown.yml'                                           |\n| pkgdown          | A folder named 'docs'                                                 |\n| Static HTML page | A file named 'index.html' in a folder named 'docs'                    |\n| plumber API      | A file named 'plumber.R                                               |\n| Quarto           | Not yet available                                                     |\n\n: Possible RStudio Connect content types\n\n### Accessibility\n\nThe internal RSConnect servers are behind the DfE firewall and can be\naccessed by anyone from a DfE device. If you do not have a license then\nyou will only be able to view content which has been open to be viewed\nby everyone in the department.\n\nAll RSConnect apps on the Production server can be accessed with any web\nbrowser (although Chrome or Firefox are recommended), and can all be\naccessed via a URL that starts with https://rsconnect/rsc/... - the end\nof the URL will be different for each piece of deployed content.\n\n# Preparing for deployment\n\nBefore you start the deployment process for a particular project, there\nare some steps you must take first to ensure that your project meets the\nrequirements for deployed content within the Department.\n\n## Git & renv\n\n-   **Your project must be version controlled with Git:** this can be\n    done in several ways, such as with the `git init` command in Git\n    Bash or the command prompt, or in RStudio itself. If you are\n    unfamiliar with Git, there are several [tutorials online that can\n    help](https://www.atlassian.com/git/tutorials/) - it is crucial\n    that, at the very least, you are comfortable committing and pushing\n    changes to a remote repository. You should ensure that you have a\n    repository set up and you have committed your work so far.\n\n-   **Your project must use `renv`:**\n    [`renv`](https://rstudio.github.io/renv/index.html) is an R package\n    that allows you to manage the packages used in your project. It\n    keeps track of which packages you have installed and what versions\n    you are using. This is useful when collaborating with others as it\n    allows you to quickly and easily make sure you are using the same\n    versions of the same packages as your collaborators - reducing the\n    risk of differences across devices. Package management with renv is\n    crucial for deploying content to RStudio Connect, however, because\n    it is used by RSConnect to install all the packages needed for your\n    content to work.\n\n    -   You can easily set up renv for an existing project using\n        `renv::init()` and making sure you run `renv::snapshot()` (and\n        commit any changes to Git) **before every deployment**.\n\n## Azure Devops\n\n-   **Your project must have a remote repository on Azure Devops:** as\n    mentioned previously, you should have access to a an Azure Devops\n    project. If you do - and you have set up Git correctly - you should\n    be able to add this repository as a remote for your project and push\n    any changes you have committed so far.\n\n# Pipelines & Deployment\n\nOnce you have your repository hosted on Azure Devops, you are ready to\nset up your Release Pipeline. This is what will actually perform the\nprocess of deploying your app to RSConnect.\n\n## Common types of pipeline\n\nTo help with the process of setting up a pipeline, there are two\ntemplates provided below which you can download and use to set up your\npipeline, following the instructions below. But first you need to\nunderstand a bit more about release pipelines and the difference between\nthe two templates below.\n\nRelease pipelines consist of an **artifact** and one or more **stages**.\n\n-   The **artifact** is the source for any code that is to be deployed -\n    this is your Azure Devops repository that you've set up to host your\n    project repository.\n\n-   Each **stage**, runs some code and optionally has some environment\n    variables assigned to them which determine exactly how that code is\n    run. In our case, we will use environment variables to determine\n    whether we are deploying to the Production server or the\n    Pre-Production server.\n\n-   Each stage can also optionally have **pre-deployment conditions**,\n    which must be met before a stage is begun. In our case, we can use\n    this to set an 'approver' for deployment to a stage - e.g. if\n    multiple people are working on a project, a lead developer may have\n    to give approval for any deployment to Production.\n\nWhen pipelines are set up, **releases** can then be created. Each\nrelease will travel from the artifact, along the pipeline and through\neach stage (as long as it passes the pre-deployment checks). An\nimportant point is that pipelines can be set up to automatically create\nreleases whenever a change is pushed to the artifact (the Azure Devops\nrepository). Combining this with the pre-deployment checks for each\nstage gives a multitude of options for how pipelines can work.\n\nIn practice, the vast majority of projects will suit either a 2-stage or\n3-stage pipeline.\n\n-   In a **2-stage pipeline**:\n    -   If a change is made to any non-main branch in the repository:\n        -   No release is created\n    -   If a change is made to the main branch in the repository:\n        -   A new release is created\n        -   A 'PreProd' version of the content is deployed to the\n            Pre-Production RSConnect server.\n        -   If that is successful, pre-deployment conditions for Prod\n            are checked (i.e. an approver may have to give consent for\n            the release to continue)\n        -   A 'Prod' version of the content is deployed to the\n            Production RSConnect server (this will be what\n            customers/viewers of your content see)\n\n![Two stage pipeline](img/two_stage_pipeline.PNG)\n\nA 2-stage pipeline is best for content that will iterate quickly, might\nonly have one or two people working on it and typically may not require\nmuch QA/checking of changes. The general workflow will be that every\ntime a change is made to the main branch and the content has been\ndeployed to PreProd, the developer will check that it looks as expected\nand there aren't any differences to how it appeared locally. If they are\nhappy that the change has worked as expected, they can approve the\nchange and it will be deployed to Prod.\n\n-   In a **3-stage pipeline**:\n    -   If a change is made to any non-main branch in the repository:\n        -   A new release is created\n        -   A 'Dev' version of the content is deployed to the\n            Pre-Production RSConnect server.\n    -   If a change is made to the main branch in the repository:\n        -   A new release is created\n        -   A 'PreProd' version of the content is deployed to the\n            Pre-Production RSConnect server.\n        -   If that is successful, pre-deployment conditions for Prod\n            are checked (i.e. an approver may have to give consent for\n            the release to continue)\n        -   A 'Prod' version of the content is deployed to the\n            Production RSConnect server (this will be what\n            customers/viewers of your content see)\n\n![Three stage pipeline](img/three_stage_pipeline.PNG)\n\nA 3-stage pipeline provides more flexibility and more rigorous QA\nopportunities than a 2-stage pipeline. The general workflow will be that\nevery time a change is made to a non-main branch of the repository, a\nDev version of the content will be deployed to the Pre-Production\nRSConnect server. This can be then be viewed by the developer who made\nthe change to see if it looks as expected. The Dev version will\ntypically be where you test out potential changes where you are unsure\nif they will work as expected. Once you are happy that the Dev version\nis working, the changes can be merged into the main branch, which will\ntrigger a deployment to PreProd. Here, the changes can be double\nchecked, either by the developer or ideally another person. This is the\nfinal stage for ensuring the deployment won't break anything and once\nthis has been approved, it will deploy to the Prod version on the\nProduction server and customers/viewers will be able to see the change.\n\nIf you are unsure which of the two pipelines is most appropriate for\nyou, I'd recommend you default to the 3-stage pipeline as it allows more\nroom for error and doesn't increase the complexity of the pipeline too\nsignificantly.\n\nUse the buttons below to download the relevant template:\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<a onclick=\"fetch(&#39;data:application/json;base64,&#39;).then(res =&gt; res.blob()).then(blob =&gt; {&#10;      const downloadURL = window.URL.createObjectURL(blob);&#10;      const a = document.createElement(&#39;a&#39;);&#10;      document.body.appendChild(a);&#10;      a.href = downloadURL;&#10;      a.download = &#39;pipeline-template-2s.json.json&#39;; a.click();&#10;      window.URL.revokeObjectURL(downloadURL);&#10;      document.body.removeChild(a);&#10;    });\">\n<button class=\"btn btn-info\"><i class=\"fa fa-save\"></i> Download 2 stage pipeline</button>\n</a>\n```\n:::\n\n::: {.cell-output-display}\n```{=html}\n<a onclick=\"fetch(&#39;data:application/json;base64,&#39;).then(res =&gt; res.blob()).then(blob =&gt; {&#10;      const downloadURL = window.URL.createObjectURL(blob);&#10;      const a = document.createElement(&#39;a&#39;);&#10;      document.body.appendChild(a);&#10;      a.href = downloadURL;&#10;      a.download = &#39;pipeline-template-3s.json.json&#39;; a.click();&#10;      window.URL.revokeObjectURL(downloadURL);&#10;      document.body.removeChild(a);&#10;    });\">\n<button class=\"btn btn-info\"><i class=\"fa fa-save\"></i> Download 3 stage pipeline</button>\n</a>\n```\n:::\n:::\n\n\n## Implementing your template\n\nOnce you have the json file template downloaded from above, you can\ncreate a new Release pipeline for your content. In an Azure Devops\nProject, go to Pipelines -\\> Releases (on the navigation menu on the\nleft).\n\n![Release pipelines](img/release_pipelines.PNG)\n\nClick on 'New' and 'Import Release Pipeline'\n\n![Import release pipelines](img/import_release_pipeline.PNG) This should\nbring up a dialog box where you can select the json template you\ndownloaded above. Click OK and this should take you to your pipeline\nediting page.\n\nThere are a few more steps you must take before you can create your\nfirst release and these will differ depending on which of the two\ntemplates you are using.\n\n### Two-stage pipeline\n\nIf you are using a 2-stage pipeline, your pipeline page should look like\nthe image below:\n\n![Imported 2-stage\npipelines](img/imported_two_stage_pipeline_annotated.PNG)\n\n1)  First, you should rename your pipeline. Use the name of your\n    repository or content and use hyphens instead of spaces.\n\n2)  Next you need to add the artifact, if you click on the box on the\n    left that says 'Add artifact', it will bring up the menu below.\n\n![Add artifact](img/add_artifact.PNG)\n\nHere you should select your Azure Devops Project and your repository,\nafter which some additional options will appear below. You should only\nneed to add information for two of them.\n\n-   For 'Default branch', select your main branch (i.e. 'master' or\n    'main')\n\n-   For 'Default version', select 'Latest from the default branch'\n\nThen you can click 'Add' to add your artifact.\n\n3)  Click on the 'Pre-prod' box, which will take you to the Task page\n    for that stage. If you click on the 'Deploy to RSConnect' task, you\n    should see something similiar to below.\n\n![Preprod task](img/pipeline_preprod_task.PNG)\n\nIn the setting that requires attention - 'Agent pool' - select\n'RSConnect'. If you cannot see it, you will have to raise a service desk\nrequest to allow your Azure Devops project access to the build server.\n\nYou can then go back to the pipeline view by clicking 'Pipeline' in the\nmenu above.\n\n4)  Click the oval button on the left of the Prod stage. This will bring\n    up the pre-deployment conditions for deployment to production.\n\n![Pre-deployment conditions](img/pre_deployment_conditions.PNG)\n\nHere you can either select someone to be the approver, or disable this\nif you do not want it.\n\n5)  Repeat step 3, but for Prod this time.\n\n6)  Next you should set up your artifact to create a release every time\n    you make a change to the main branch. You can do this by clicking on\n    the lightning bolt symbol on the right of your artifact. This will\n    bring up a menu where you can enable 'Continuous deployment trigger'\n    and select your main branch so that commits to other branches do not\n    inadvertently cause a release.\n\n![Continuous deployment trigger](img/continuous_deployment_trigger.PNG)\n\n7)  Now you just need to make one more change and you will be ready to\n    create a release and deploy your content! Click on 'Variables' on\n    the menu at the top. This will bring up a list of three variables,\n    two named APP_ID (you'll fill those in later) and one called\n    APP_NAME. Enter a value for the variable APP_NAME: use the name of\n    your project, with hyphens instead of spaces.\n\nNow you can save your pipeline and go to 'Creating your first release'!\n\n### Three-stage pipeline\n\nIf you are using a 3-stage pipeline, your pipeline page should look like\nthe image below:\n\n![Imported 3-stage\npipelines](img/imported_three_stage_pipeline_annotated.PNG)\n\n1)  First, you should rename your pipeline. Use the name of your\n    repository or content and use hyphens instead of spaces.\n\n2)  Next you need to add the artifact, if you click on the box on the\n    left that says 'Add artifact', it will bring up the menu below.\n\n![Add artifact](img/add_artifact.PNG)\n\nHere you should select your Azure Devops Project and your repository,\nafter which some additional options will appear below. You should only\nneed to add information for two of them.\n\n-   For 'Default branch', select your main branch (i.e. 'master' or\n    'main')\n\n-   For 'Default version', select 'Latest from the default branch'\n\nThen you can click 'Add' to add your artifact.\n\n3)  Click the oval button on the left of the Dev stage. This will bring\n    up the pre-deployment conditions for deployment to dev.\n\n![Dev pre-deployment conditions](img/dev_pre_deployment.PNG)\n\nHere you should enable Artifact filters, then click 'Add' and select\nyour artifact. In the new filter, select Type as 'Exclude' and Branch as\nyour main branch (e.g. main or master). This will ensure that deployment\nwill only happen to Dev when a change is made to a non-main branch.\n\n![Dev pre-deployment filter](img/dev_pre_deployment_filtered.PNG)\n\n4)  Click on the 'Dev' box, which will take you to the Task page for\n    that stage. If you click on the 'Deploy to RSConnect' task, you\n    should see something similiar to below.\n\n![Preprod task](img/pipeline_preprod_task.PNG)\n\nIn the setting that requires attention - 'Agent pool' - select\n'RSConnect'. If you cannot see it, you will have to raise a service desk\nrequest to allow your Azure Devops project access to the build server.\n\nYou can then go back to the pipeline view by clicking 'Pipeline' in the\nmenu above.\n\n5)  Repeat step 4, for Pre-Prod.\n\n6)  Click the oval button on the left of the Prod stage. This will bring\n    up the pre-deployment conditions for deployment to production.\n\n![Pre-deployment conditions](img/pre_deployment_conditions.PNG)\n\nHere you can either select someone to be the approver, or disable this\nif you do not want it.\n\n7)  Repeat step 4, but for Prod this time.\n\n8)  Next you should set up your artifact to create a release every time\n    you make a change to the main branch. You can do this by clicking on\n    the lightning bolt symbol on the right of your artifact. This will\n    bring up a menu where you can enable 'Continuous deployment trigger'\n    and select your main branch so that commits to other branches do not\n    inadvertently cause a release.\n\n![Continuous deployment trigger](img/continuous_deployment_trigger.PNG)\n\n9)  Now you just need to make one more change and you will be ready to\n    create a release and deploy your content! Click on 'Variables' on\n    the menu at the top. This will bring up a list of three variables,\n    two named APP_ID (you'll fill those in later) and one called\n    APP_NAME. Enter a value for the variable APP_NAME: use the name of\n    your project, with hyphens instead of spaces.\n\nNow you can save your pipeline and go to 'Creating your first release'!\n\n## Creating your first release\n\nIf you have followed the steps above correctly, then whenever you push a\nchange to the main branch of your repository it will create a new\nrelease for you. The first time however, it is easier to just manually\ncreate the release in Azure Devops itself.\n\nTo do this, go to Releases (i.e. see the first screenshot in the\n'Implementing your pipeline' section) and select your pipeline on the\nleft hand side - you may have to search for it and you should favourite\nit so that it is more visible in future. If you hover your mouse over\nthe pipeline you will see a star you can click on the right.\n\n![Finding your release pipeline](img/find_pipeline.PNG)\n\nOnce you have selected your release pipeline, you can click the blue\n'Create release' button in the top right to manually create a release.\nYou should see a menu like below (it may differ slightly depending on\nhow you set your pipeline up and how many stages it has):\n\n![Create release menu](img/create_release.PNG)\n\nYou do not *need* to change anything here, but for information:\n\n-   The 'Stages for a trigger change from automated to manual.' section\n    can be used to make sure that e.g. the release does not\n    automatically deploy to Prod once Pre-prod has completed. This might\n    be useful if you are manually creating a release but want to make\n    sure it does not deploy to Production.\n-   The 'Artifacts' section can be used to select a different commit\n    than the most recent from the main branch. It is unlikely you will\n    ever need to change this.\n-   The 'Release description' section can optionally be used to add a\n    comment to your release. This might be useful when you check back in\n    future to remind yourself if there is a specific reason for you\n    manually creating a release (rather than it automatically being\n    created).\n\nClick the 'Create' button at the bottom.\n\nYou should see a new release appear in the 'Releases' section of the\npage (you may have to refresh the page). The release will be greyed out\nfor all stages but will have started running the tasks of your first\nstage. You can click on the relase name to monitor the progress of the\nrelease but otherwise, wait for a few minutes until the stage(s) are\ncomplete. - If your stages all deploy successfully - great! You can\ncontinue with this section. - If one or more of your stages are\nunsuccessful, see the Troubleshooting section for common problems, or\npost in the DfE R Community Teams site.\n\n::: callout-note\nNote that sometimes a deployment stage will be marked as 'Successful'\nwhen it has in fact failed. This is because the status shown in Azure\nDevops denotes whether *the app was successfully bundled and passed to\nRSConnect* and is unaware of whether *RSConnect successfully unpacked\nthe app and can display it* - although this will be visible from the\ndeployment log.\n:::\n\nIf your app has successfully deployed to all stages - you're almost\ndone! There are just a couple of extra steps that need to be completed\nfirst.\n\nTo get more information on your release, you should view the log file\nfor the deployment. To do this, click on a release and then hover over a\nstage of that release. A 'Logs' button should appear, click it. You\nshould then be able to see the following page:\n\n![Click on a release](img/single_release.PNG)\n\n![Click on a stage's logs](img/single_release_stage.PNG)\n\n![The logs for a particular stage](img/single_release_stage_logs.PNG)\n\nIf you then click on the section titled 'PowerShell Script', you will\nsee the detailed logs for the main section of the release stage\ndeployment. It will look something like the below:\n\n::: column-page\n![Release stage deployment log](img/release_powershell_script.PNG)\n:::\n\n### Reading a deployment log file {#reading-a-deployment-log-file}\n\nThe PowerShell script log is broken up into a few different stages -\nthese correspond to the different stages of the 'Deploy to RSConnect'\ntask.\n\n1)  First, the script will print out some information about the Build\n    server (which is where this task is occurring) and then print the\n    value of all available environment variables. For example, if you\n    look for the line that starts 'RELEASE_ENVIRONMENTNAME', that will\n    be either Pre-Prod or Prod depending on which stage you are\n    deploying. You can look through these to see what information Azure\n    Devops knows about your deployment.\n\n2)  The task then tries to restore the developer's environment. This is\n    where `renv` is used to install all the packages necessary for your\n    content to run. Note that this is installing these packages onto the\n    **Build server**, before it then bundles the information up and\n    sends it to the relevant RSConnect server. For this stage of the log\n    file you will be able to see which packages and versions it is\n    trying to install and whether it was successful.\n\n3)  The section immediately following the installation of R packages is\n    where the Build server bundles the project and sends it to the\n    RSConnect server. This section starts with the line 'Preparing to\n    deploy application...DONE' (row 497 below) and ends with 'Deploying\n    bundle:...' (row 503 below). If you see any warnings like those on\n    rows 498-501, they can be ignored. **Important**: you will need to\n    make a note of your app ID. This is visible on the line 'Uploading\n    bundle for application: xxx ...DONE' (row 502 below). In this case,\n    the APP_ID is 693. Make a note of that for later.\n\n::: column-screen-inset\n![Bundling stage of deployment](img/intermediate_stage.PNG)\n:::\n\n4)  Any lines that start with '\\[Connect\\]' are output of code being run\n    on the RSConnect server. The first lines of this section just print\n    some information about the RSConnect server like R version and\n    server info.\n\n5)  Following this, the required R packages are installed on the\n    RSConnect server (so the content can be run). **This is when most\n    issues will occur, so check this section if it looks like something\n    has gone wrong.**\n\n6)  If the deployment was successful, this section will end with the\n    line 'Application successfully deployed to...' and then a URL (row\n    706 below). Make a note of this URL, as you will need it later.\n\n![Application successfully\ndeployed](img/application_successfully_deployed.PNG)\n\n7)  The final section gives some information on the deployment - this is\n    stored for information governance purposes for access by RStudio\n    Connect admins.\n\n### Final steps {#final-steps}\n\nIf you remember back in the last step of 'Implementing your template',\nwe saw there was an environment variable associated with each stage\ncalled APP_ID. This should be filled in for each stage with the integer\nnumber you saw in step 3 of reading your deployment log file above (i.e.\nthe ID will be different for each stage).\n\nThe final step before being able to see your content is to raise some\nservice desk requests. You can do that\n[here](https://dfe.service-now.com/serviceportal?id=sc_cat_item&sys_id=1e3c3cb9db80ab003b929334ca9619df&referrer=recent_items)\n\nThe first request should be for 'Change App Access List'. For access you\ncan choose either:\n\n-   Entire Organisation: which means everyone in the DfE will be able to\n    view your content\n-   Specific users/AD Groups: you can give the username/email of\n    individuals (including yourself) to give them access to the content.\n    Alternatively, you can specify an existing AD group to be used to\n    restrict access.\n\nYou should then also request to add yourself as a publisher - same link\nas above ('Change to user role' -\\> 'Publisher'). This will mean you are\nable to view the logs for your content once it has been deployed to\nRSConnect. In the 'Justification' section, put something along the lines\nof 'I have deployed ('App X') and wish to be added as a collaborator so\nI can view the content logs'.\n\nYou may also wish to change the URL of your content (Change App URL), as\nthe default URL uses the app GUID and so is not user friendly. Here you\ncan change the URL to something more relevant and easy to remember.\n\n# Troubleshooting/FAQs\n\nBelow are some common error messages that appear in the deployment log\nfile and how to resolve them - see [Reading a deployment log\nfile](#reading-a-deployment-log-file) for information on the structure\nof a log file. Most of these error messages will occur near the bottom\nof the log file (sections 5 and 6 of the 'Reading a deployment log\nfile').\n\n-   *\"Unable to fully restore the R packages associated with this\n    deployment.\"*\n    -   This is the most common erorr message and is fairly self\n        explanatory. The exact cause of the error can vary and this\n        message is usually preceded by a large amount of output that may\n        be hard to read.\n    -   First, you should identify the package causing the error. In the\n        image below, it is v8.0.0 of the arrow package.\n    -   If you have recently updated this package and need a quick fix,\n        try installing an older version of the package and redeploying.\n        This can be done by e.g.\n        `remotes::install_version(\"arrow\", \"7.0.0\")` - remembering to\n        `renv::snapshot()` before deploying.\n    -   If you haven't recently updated or need to use this specific\n        version of the package, please post in the DfE R Community Teams\n        site (Help and Errors channel) as it will likely require a\n        change to the RSConnect server configuration.\n\n::: column-screen-inset\n![Deployment error caused by arrow\n8.0.0](img/deployment_error_arrow.PNG)\n:::\n\n-   *\"Unknown content type\"*\n    -   This is caused by the project not meeting one of the\n        requirements for identifying the content type. See the ['Content\n        types' section](#content-types) above.\n-   *\"Application depends on package\"x\" but it is not installed\"*\n    -   This usually means you haven't `renv::snapshot()`ted before\n        deploying. Make sure you have all the named packages installed\n        before snapshotting and redeploying.\n-   *\"Error in result_insert_dataframe/Invalid character value for cast\n    specification\"*\n    -   If this error message appears at the bottom of your deployment\n        log file, it most likely means that you have not specified your\n        APP_ID environment variable correctly. Note that this will not\n        affect your deployment as it is a post-deployment task that has\n        failed. All the same, you should make sure your APP_ID\n        environment variables are all integer numbers (see step 3 of\n        ['Reading a deployment log\n        file'](#reading-a-deployment-log-file))\n-   You have deployed successfully, but when you visit your app it says:\n    *\"The application failed to start. Contact the author or review the\n    logs for more information.\"*\n    -   This means the deployment was successful but there was an error\n        when *running* your app. You should check the logs for your app\n        to see what the issue was.\n    -   To do this, you must be a publisher on RSConnect and\n        collaborator of the app. If you are not already, raise a service\n        desk request (see the ['Final steps' section](#final-steps) for\n        how to do this).\n    -   Then you can see the logs by going to\n        *https://rsconnect/rsc/connect/#/apps/xxx/logs* (prod) or\n        *https://rsconnect-pp/rsc/connect/#/apps/xxx/logs* (pre-prod),\n        where 'xxx' is the APP_ID for your app.\n\n# Glossary\n\n**Artifact**: the repository that a release pipeline is looking at.\n\n**Build server**: a computer that is used to deploy content to\nRSConnect - it is the stepping stone between Azure Devops and the\nRSConnect servers\n\n**Content**: some R code that displays something and can be deployed to\nRSConnect - e.g. a Shiny app or an RMarkdown Document.\n\n**Deployment**: See 'Release'.\n\n**Pipeline**: technically a 'Release pipeline'. A set of stages which\ntake in a snapshot of a repository and run some code, optionally with\nother conditions or filters.\n\n**Release**: a snapshot of your repository that is to be passed to\nvarious stages within a pipeline.\n\n**RSConnect**: RStudio Connect, a web server for hosting R content. Note\nthat this can mean RSConnect servers (i.e. the machine the content is\nhosted on) or RSConnect the software (which is installed on the servers\nand does all the work of hosting the content.)\n\n**Stage**: a step in a pipeline which takes in a snapshot of a\nrepository and runs some code. In 99% of cases that code will be 'deploy\nthis content to RSConnect'.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/font-awesome-5.13.0/js/script.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}