{
  "hash": "25b6a3c32812f7cdb670c3a328a34f90",
  "result": {
    "markdown": "---\ntitle: \"Introducing The DfE R Community Blog\"\nauthor: \"Jacob Scott\"\ndate: \"2022-10-01\"\ncategories: [news]\ndescription: 'Why GitHub? Why the DfE R Community? Why blog? Some brief thoughts on all the above.'\nimage: \"logo-small.png\"\nexecute: \n  message: false\n  warning: false\n---\n\n::: {.cell}\n\n:::\n\n\n# The DfE R Community\n\n## Current state\n\nThe DfE R Community has a lot going for it. We have an active community\non Teams, semi-regular community meetings (most notably Coffee &\nCoding), and a good number of friendly experts who will generally take\nthe time to help others troubleshooting bugs and Shiny app deployments.\n\nIf you were to sum up our R Community in a word, I think *maturing*\nwould be a good fit. But, as with anything, there is room for\nimprovement. As the technologies we've adopted in recent years become\nmore embedded, we should step back and ask, *What can we do better?*\n\n## Areas for improvement\n\nWhile our knowledge of R *basics* is quite strong, we still have plenty\nof room for improvement in other important areas. Among these, the most\nobvious ones are:\n\n-   **Version control**: use of Git and GitHub / AZURE DevOps. Git\n    skills are particularly tough to learn, but are much easier in\n    collaboration with others. Good version control habits are extremely\n    valuable skills - not only do they help you code better, they help\n    you *think* clearly about project development.\n\n-   **Collaboration**: currently we don't do much of this across\n    divisions. This makes sense - different divisions do different\n    things - but the smaller the knowledge-pool is, the easier it is for\n    bad habits to form. Building links between areas will only be a good\n    thing, and will potentially save hours of puzzling if people know\n    where to ask for answers when they run into tough problems.\n\n-   **Best practice**: which packages/functions *shouldn't* you use? How\n    can you speed up your code? How can you make your code easier for\n    other people to understand? These questions fall under 'best\n    practice', and developing ourselves in this area will lead to less\n    bugs, quicker development, and will make handing over projects to\n    other colleagues *much* less painful.\n\n-   **Events**: Previously we've had successful programmes like Coffee &\n    Coding in the past, but more recently there hasn't been much on.\n    Regular DfE R Community catchups will help keep people engaged with\n    the community, working together with other like-minded analysts and\n    developing their skills. It'll also help us keep abreast of the\n    constant stream of new techniques and technologies emerging in the\n    data-science world.\n\n## Q: How can we improve? A: By using GitHub!\n\nUsing GitHub for development has several major benefits:\n\n-   GitHub is **open**: teams won't have to make endless access requests\n    in order to work together\n\n-   GitHub is **widely used**: we can easily learn lessons from other\n    organisations, e.g. by looking through issues and pull requests on\n    non-DfE projects - R packages from the Tidyverse are good examples\n\n-   GitHub is **transparent**: projects if we develop useful code we\n    will get feedback from its users when things break - or when we do\n    things in an obviously sub-optimal way. This will help us build\n    habits of properly maintaining and addressing bugs in existing\n    projects and formally deprecating any defunct/superseded code.\n\n-   GitHub is **collaborative**: communicating about code is\n    challenging, but GitHub provides many polished, thoughtful\n    solutions. This will make it easier to *give and ask for feedback*\n    on code, and will help develop our communication skills as analysts\n    in ways which will be naturally transferable - particularly to\n    internal work we do on AZURE DevOps.\n\nThe UK Government [Technology Code Of\nPractice](https://www.gov.uk/guidance/the-technology-code-of-practice#be-open-and-use-open-source)\nunequivocally supports open source development, and actively encourages\ngovernment departments to move towards open source as a mode of\ndevelopment:\n\n> **3. Be open and use open source**\n>\n> Publish your code and use open source software to improve\n> transparency, flexibility and accountability.\n\n::: callout-note\nAs a general rule, projects we develop on GitHub will be *potentially\nuseful to members of the public*. Needless to say, projects using\nsensitive data are out of the question.\n:::\n\n## So... The blog?\n\nThe DfE R Community Blog will be a place where we (civil servants at\nDfE) can share our thoughts, experiences and lessons learnt as we\ndevelop code together. These might include technical guides, pieces on\nspecific coding techniques (they don't have to just be about R!),\nannouncements about community projects, or more reflective pieces like\nthis one. Anyone is welcome to submit contributions - a brief guide for\nhow to do this can be found on the [blog's\nrepo](https://github.com/DfE-R-Community/dfe-r-community.github.io).\n\n## How can I get involved?\n\nThe easiest way is to go to the DfE R Community organisation on GitHub,\nfind a project you're interested in and create a new issue saying you\nwant to help! Alternatively, if you have an idea for a new project,\nmessage one of the organisation members about it and we'll help you get\nset up ðŸ˜ƒ\n\nIf you'd like to write a blog post, you can read about how to do this at\nthe [blog's\nrepo](https://github.com/DfE-R-Community/dfe-r-community.github.io).\n\n## Thanks for reading!\n\nThat's all for now! Here's some R code to reward you for making it this\nfar:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(gganimate)\n\ntext <- \"That's All Folks!\"\n\n# Create a dataset to plot\nplot_data <- tibble(\n\ttext = map_chr(seq_len(nchar(text)), ~ substr(text, 1, .x)),\n\tframe = seq_along(text)\n)\n\n# Create a plot\np <- ggplot(plot_data, aes(1, 1, label = text)) +\n\tgeom_text(size = 12, angle = 10) +\n\ttransition_states(frame)\n\n# Animate and print\nanimate(p, fps = 60)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/thats-all-folks-1.gif)\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}